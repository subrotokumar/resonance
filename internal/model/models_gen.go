// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Echo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Mutation struct {
}

type Query struct {
}

type Resonator struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Weapon struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

type Rarity string

const (
	RarityOne   Rarity = "one"
	RarityTwo   Rarity = "two"
	RarityThree Rarity = "three"
	RarityFour  Rarity = "four"
	RarityFive  Rarity = "five"
)

var AllRarity = []Rarity{
	RarityOne,
	RarityTwo,
	RarityThree,
	RarityFour,
	RarityFive,
}

func (e Rarity) IsValid() bool {
	switch e {
	case RarityOne, RarityTwo, RarityThree, RarityFour, RarityFive:
		return true
	}
	return false
}

func (e Rarity) String() string {
	return string(e)
}

func (e *Rarity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rarity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Rarity", str)
	}
	return nil
}

func (e Rarity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
